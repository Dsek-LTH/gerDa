local ran_ok,err=pcall(function()local ran_ok,kpse=pcall(require, "kpse")if ran_ok then kpse.set_program_name("luatex")end assert(load("local lfs = require(\"lfs\") local cacheDir = \"./_markdown_latex-pdftex\" if not lfs.isdir(cacheDir) then assert(lfs.mkdir(cacheDir)) end local md = require(\"markdown\") local convert = md.new({cacheDir = \"./_markdown_latex-pdftex\", contentBlocksLanguageMap = \"markdown-languages.json\", debugExtensionsFileName = \"./latex-pdftex.debug-extensions.json\", frozenCacheFileName = \"./_markdown_latex-pdftex/frozenCache.tex\", blankBeforeBlockquote = false, blankBeforeCodeFence = false, blankBeforeDivFence = false, blankBeforeHeading = false, bracketedSpans = false, breakableBlockquotes = false, citationNbsps = true, citations = false, codeSpans = true, contentBlocks = true, debugExtensions = true, definitionLists = true, eagerCache = true, expectJekyllData = false, extensions = {}, fancyLists = true, fencedCode = true, fencedCodeAttributes = false, fencedDivs = false, finalizeCache = false, frozenCacheCounter = 0, hardLineBreaks = false, hashEnumerators = true, headerAttributes = false, html = false, hybrid = true, inlineFootnotes = false, inlineNotes = true, jekyllData = true, lineBlocks = true, footnotes = false, notes = true, pipeTables = true, preserveTabs = false, rawAttribute = true, relativeReferences = false, shiftHeadings = 0, slice = \"^ $\", smartEllipses = true, startNumber = true, strikeThrough = true, stripIndent = false, subscripts = true, superscripts = true, tableCaptions = true, taskLists = true, texComments = false, texMathDollars = true, tightLists = true, underscores = true, }) local file = assert(io.open(\"./latex-pdftex.markdown.in\", \"r\"), [[Could not open file \"./latex-pdftex.markdown.in\" for reading]]) local input = assert(file:read(\"*a\")) assert(file:close()) print(convert(input))"))()end)if not ran_ok then local file=io.open("./latex-pdftex.markdown.err","w")if file then file:write(err.."\n")file:close()end print('\\begingroup\\ExplSyntaxOn\\csname msg_error:nnvv\\endcsname{luabridge}{failed-to-execute}{g_luabridge_output_dirname_str}{g_luabridge_error_output_filename_str}\\endgroup')end
